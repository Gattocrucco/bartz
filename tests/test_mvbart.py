"""Test multivariate BART components."""

import pytest
from jax import numpy as jnp
from jax import random
from scipy.stats import chi2, ks_1samp

from bartz.mcmcstep import _sample_wishart_bartlett
from tests.util import assert_close_matrices


class TestWishart:
    """Test the basic properties of the wishart sampler output."""

    # Parameterize with (k, df) pairs
    @pytest.fixture(params=[(1, 3), (3, 3), (3, 5), (3, 100), (100, 102)])
    def wishart_params(self, request):
        """Provide (k, df) pairs for testing."""
        k, df = request.param
        return k, df

    def random_pd_matrix(self, key, k):
        """Generate a random positive definite matrix."""
        A = random.normal(key, (k, k))
        return A @ A.T + jnp.eye(k)

    def ill_conditioned_matrix(self, key, k, condition_number=1e6, exact_psd=True):
        """Generate a ill conditioned random positive semi-definite matrix."""
        A = random.normal(key, (k, k))
        U, _ = jnp.linalg.qr(A)

        if exact_psd:
            if k == 1:
                eigs = jnp.zeros(1)
            else:
                smalls = jnp.geomspace(1.0, 1.0 / condition_number, num=k - 1)
                eigs = jnp.concatenate([smalls, jnp.array([0.0])])
        else:
            eigs = jnp.geomspace(1.0, 1.0 / condition_number, num=k)
        return (U * eigs) @ U.T

    def test_size(self, keys, wishart_params):
        """Check that the sample generated by wishart sampler is of shape k*k."""
        k, df = wishart_params
        scale = self.random_pd_matrix(keys.pop(), k)
        sample = _sample_wishart_bartlett(keys.pop(), df, scale)
        assert sample.shape == (k, k)

    def test_symmetric(self, keys, wishart_params):
        """Check that the sample generated by wishart sampler is symmetric."""
        k, df = wishart_params
        scale = self.random_pd_matrix(keys.pop(), k)
        sample = _sample_wishart_bartlett(keys.pop(), df, scale)
        assert_close_matrices(sample, sample.T, rtol=1e-6)

    def test_pos_def(self, keys, wishart_params):
        """Check that the sample generated by wishart sampler is positive definite."""
        k, df = wishart_params
        scale = self.random_pd_matrix(keys.pop(), k)
        sample = _sample_wishart_bartlett(keys.pop(), df, scale)
        eigs = jnp.linalg.eigvalsh(sample)
        assert jnp.all(eigs > 0)

    def test_near_singular_scale(self, keys, wishart_params):
        """Check that the wishart sampler still works with singular or near singular matrix."""
        k, df = wishart_params
        ill_conditioned_scale = self.ill_conditioned_matrix(keys.pop(), k)
        sample = _sample_wishart_bartlett(keys.pop(), df, ill_conditioned_scale)
        assert jnp.all(jnp.isfinite(sample))

    def test_wishart_dist(self, keys, wishart_params):
        """Check that the sample generated by wishart sampler follows a wishart distribution."""
        k, df = wishart_params
        nsamples = 1000
        sigma = self.random_pd_matrix(keys.pop(), k)
        scale_inv = jnp.linalg.inv(sigma)

        a = random.normal(keys.pop(), (k,))
        denumerator = a.T @ sigma @ a

        ts = []
        for _ in range(nsamples):
            W = _sample_wishart_bartlett(keys.pop(), df, scale_inv)
            t = a.T @ W @ a / denumerator
            ts.append(t)
        ts = jnp.array(ts)

        test = ks_1samp(ts, chi2(df).cdf)
        assert test.pvalue > 0.01
